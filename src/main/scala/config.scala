// See LICENSE.txt
package ressort.compiler

/** Insertion sort code generation parameters
  *
  * @param Use Mux() instead of If?
  * @param Don't gen special code for sizes > maxUnroll
  * @param Threshold below which don't attempt reg alloc
  */
case class InsertionSortConfig(
  genCmov: Boolean,
  maxUnroll: Int,
  regsThresh: Int)

/** Code generation parameters for loops that process streams of [[Rec]]s
  *
  * @param unroll         Degree of unrolling of main loop body, with loads
  *                       grouped at beginning for earilest possible issue
  *
  * @param prefetch       Number of records ''beyond the current unrolling''
  *                       for which to issue [[Prefetch]] operations.
  *
  * @param prefetchStride Distance (in number of elements) between the
  *                       successive [[Prefetch]] ops generated by this
  *                       unrolled loop.
  *
  * @param prefetchOffset Distance (in number of elements) beyond the
  *                       current unrolling at which to start issuing
  *                       [[Prefetch]] operations.
  */
case class RecStreamConfig(
    unroll:         Int = 0,
    prefetch:       Int = 0,
    prefetchStride: Int = 8,
    prefetchOffset: Int = 8)

case class RadixPartConfig(
  threads:          Int=1,
  debug:            Boolean=false,
  buildHistStream:  RecStreamConfig=RecStreamConfig(),
  moveRecsStream:   RecStreamConfig=RecStreamConfig(),
  useWriteBuffer:   Boolean=true,
  linesz:           Int=64)

case class EvalConfig(
  threads:  Int=1,
  stream:   RecStreamConfig=RecStreamConfig())

case class GatherConfig(
  stream: RecStreamConfig=RecStreamConfig())

case class CompilerConfig(
  isort       :            InsertionSortConfig,
  rpart       :            RadixPartConfig,
  gather      :           GatherConfig,
  eval        :             EvalConfig,
  initBuffers :      Boolean,
  addRestrict :      Boolean,
  arrayFusion :   Boolean,
  vectorFusion:  Boolean,
  outerTrials :      Int
)

object CompilerConfig {
  val DefaultConfig = {
    CompilerConfig(
      initBuffers     = false,
      addRestrict     = false,
      arrayFusion  = true,
      vectorFusion = true,
      outerTrials     = 1,
      isort = InsertionSortConfig(
        genCmov = false,
        maxUnroll = 0,
        regsThresh = 1),
      rpart = RadixPartConfig(
        threads = 1,
        debug = false),
      gather = GatherConfig(),
      eval = EvalConfig(
        threads = 1))
  }
}

